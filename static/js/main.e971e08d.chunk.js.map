{"version":3,"sources":["compoments.tsx","index.tsx"],"names":["Square","props","className","highlight","onClick","value","Board","i","this","squares","line","includes","rows","j","push","renderSquare","React","Component","Game","state","history","Array","fill","location","col","row","stepNumber","xIsNext","ascending","slice","length","calculateWinner","Math","floor","setState","concat","step","status","current","winner","moves","map","move","desc","jumpTo","player","handleClick","toggleOrdering","reverse","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e971e08d.chunk.js","sourcesContent":["import React from \"react\";\n\nexport type SquareValue = null | \"X\" | \"O\";\ntype Location = { col: number | null; row: number | null };\ntype History = { squares: SquareValue[]; location: Location }[];\n\nfunction Square(props: {\n  highlight: boolean;\n  onClick: () => void;\n  value: SquareValue;\n}) {\n  return (\n    <button\n      className={props.highlight ? \"square highlight\" : \"square\"}\n      onClick={props.onClick}\n    >\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component<{\n  squares: SquareValue[];\n  line: [number, number, number];\n  onClick: (i: number) => void;\n}> {\n  renderSquare(i: number) {\n    return (\n      <Square\n        key={i}\n        value={this.props.squares[i]}\n        highlight={this.props.line.includes(i)}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    let rows = [];\n    for (let i = 0; i < 3; i++) {\n      let squares = [];\n      for (let j = 0; j < 3; j++) {\n        squares.push(this.renderSquare(i * 3 + j));\n      }\n      rows.push(\n        <div key={i} className=\"board-row\">\n          {squares}\n        </div>\n      );\n    }\n    return <div>{rows}</div>;\n  }\n}\n\nclass Game extends React.Component<\n  {},\n  {\n    history: History;\n    stepNumber: number;\n    xIsNext: boolean;\n    ascending: boolean;\n  }\n> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      history: [\n        { squares: Array(9).fill(null), location: { col: null, row: null } },\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n      ascending: true,\n    };\n  }\n\n  handleClick(i: number) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    const col = (i % 3) + 1;\n    const row = Math.floor(i / 3) + 1;\n    this.setState({\n      history: history.concat([\n        { squares: squares, location: { col: col, row: row } },\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(step: number) {\n    this.setState({ stepNumber: step, xIsNext: step % 2 === 0 });\n  }\n\n  toggleOrdering() {\n    this.setState({ ascending: !this.state.ascending });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      const desc = move\n        ? \"Go to move #\" +\n          move +\n          \" ( \" +\n          step.location.col +\n          \", \" +\n          step.location.row +\n          \" )\"\n        : \"Go to game start\";\n      return (\n        <li key={move}>\n          <button\n            className={move === this.state.stepNumber ? \"selected\" : \"\"}\n            onClick={() => this.jumpTo(move)}\n          >\n            {desc}\n          </button>\n        </li>\n      );\n    });\n\n    let status: string;\n    let line: [number, number, number] = [-1, -1, -1];\n    if (winner) {\n      status = \"Winner: \" + winner.player;\n      line = winner.line;\n    } else {\n      if (this.state.stepNumber < 9) {\n        status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n      } else {\n        status = \"No one wins. The result is a draw!\";\n      }\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            line={line}\n            onClick={(i: number) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <div>\n            Order:{\" \"}\n            <button onClick={() => this.toggleOrdering()}>\n              {this.state.ascending ? \"ascending\" : \"descending\"}\n            </button>\n          </div>\n          <ol>{this.state.ascending ? moves : moves.reverse()}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(\n  squares: SquareValue[]\n): null | { player: SquareValue; line: [number, number, number] } {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return { player: squares[a], line: lines[i] as [number, number, number] };\n    }\n  }\n  return null;\n}\n\nexport { Square, Board, Game, calculateWinner };\n","import ReactDOM from \"react-dom\";\nimport { Game } from \"./compoments\";\nimport \"./index.css\";\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}